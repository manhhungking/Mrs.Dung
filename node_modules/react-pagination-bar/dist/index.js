'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var classnames = createCommonjsModule(function (module) {
/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {

	var hasOwn = {}.hasOwnProperty;

	function classNames() {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg)) {
				if (arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				}
			} else if (argType === 'object') {
				if (arg.toString === Object.prototype.toString) {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				} else {
					classes.push(arg.toString());
				}
			}
		}

		return classes.join(' ');
	}

	if (module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else {
		window.classNames = classNames;
	}
}());
});

const Pagination = ({ onPageСhange, initialPage = 1, totalItems, itemsPerPage = 10, startLabel = 'Start', prevLabel = 'Prev', nextLabel = 'Next', endLabel = 'End', pageNeighbours = 4, withProgressBar = false, onlyPageNumbers = false, withGoToInput = false, onlyPaginationButtons = false, withDebug = false, customClassNames = {}, }) => {
    const [pager, setPager] = React.useState();
    const [currentPage, setCurrentPage] = React.useState(initialPage);
    const [goToInputValue, setGoToInputValue] = React.useState('');
    const styleClassName = {
        rpbRootClassName: customClassNames.rpbRootClassName || 'rpb-root',
        rpbItemClassName: customClassNames.rpbItemClassName || 'rpb-item',
        rpbItemClassNameActive: customClassNames.rpbItemClassNameActive || 'rpb-item--active',
        rpbItemClassNameDisable: customClassNames.rpbItemClassNameDisable || 'rpb-item--disabled',
        rpbProgressClassName: customClassNames.rpbProgressClassName || 'rpb-progress',
        rpbGoItemClassName: customClassNames.rpbGoItemClassName || 'rpb-go-item',
    };
    /**
     * Set new page when currentPage updates
     */
    React.useEffect(() => {
        setPage(currentPage);
        if (withDebug) {
            console.log('Current pager state: ', pager);
        }
    }, [currentPage]);
    const setPage = (page) => {
        if (page < 1 ||
            (pager && page > pager.totalPages) ||
            typeof page !== 'number' ||
            isNaN(page)) {
            return;
        }
        // Set new current page
        setCurrentPage(page);
        // Update pager
        getPager();
        // Send new page outside component
        onPageСhange(page);
    };
    const getPager = React.useCallback(() => {
        const totalPages = Math.ceil(totalItems / itemsPerPage);
        let startPage;
        let endPage;
        if (totalPages <= pageNeighbours * 2 + 1) {
            startPage = 1;
            endPage = totalPages;
        }
        else {
            if (currentPage <= pageNeighbours) {
                startPage = 1;
                endPage = pageNeighbours * 2 + 1;
            }
            else if (currentPage + pageNeighbours >= totalPages) {
                startPage = totalPages - pageNeighbours * 2;
                endPage = totalPages;
            }
            else {
                startPage = currentPage - pageNeighbours;
                endPage = currentPage + pageNeighbours;
            }
        }
        const pages = [...Array(endPage + 1 - startPage).keys()].map((i) => startPage + i);
        setPager({
            totalItems: totalItems,
            currentPage: currentPage,
            pageSize: itemsPerPage,
            totalPages: totalPages,
            startPage: startPage,
            endPage: endPage,
            pages: pages,
            endLabel,
            startLabel,
            prevLabel,
            nextLabel,
            onPageСhange,
            pageNeighbours,
            withProgressBar,
            onlyPageNumbers,
            withGoToInput,
            onlyPaginationButtons,
            withDebug,
            initialPage,
        });
    }, [currentPage, itemsPerPage, totalItems]);
    const onGoToPageSubmitHandle = () => {
        const value = Number(goToInputValue);
        if (pager) {
            if (value <= 0) {
                setPage(1);
            }
            else if (value > pager.totalPages) {
                setPage(pager.totalPages);
            }
            else {
                setPage(value);
            }
        }
    };
    if (pager && totalItems > itemsPerPage) {
        return (React__default["default"].createElement("nav", { className: styleClassName.rpbRootClassName },
            React__default["default"].createElement("ul", { id: "rpb-pagination", "aria-label": `Pagination Navigation, Current Page ${pager.currentPage}` },
                !onlyPageNumbers && (React__default["default"].createElement(React__default["default"].Fragment, null,
                    React__default["default"].createElement("li", null,
                        React__default["default"].createElement("button", { className: classnames({
                                [styleClassName.rpbItemClassName]: true,
                                [styleClassName.rpbItemClassNameDisable]: pager.currentPage === 1,
                            }), "aria-label": 'Start', onClick: () => setPage(1) }, startLabel)),
                    React__default["default"].createElement("li", null,
                        React__default["default"].createElement("button", { className: classnames({
                                [styleClassName.rpbItemClassName]: true,
                                [styleClassName.rpbItemClassNameDisable]: pager.currentPage === 1,
                            }), "aria-label": 'Prev', onClick: () => setPage(pager.currentPage - 1) }, prevLabel)))),
                !onlyPaginationButtons &&
                    pager.pages &&
                    pager.pages.map((page, index) => (React__default["default"].createElement("li", { key: index, "data-page": page, "data-current": pager.currentPage === page },
                        React__default["default"].createElement("button", { "aria-label": `Go to Page ${page}`, "aria-current": pager.currentPage === page, onClick: () => setPage(page), className: classnames({
                                [styleClassName.rpbItemClassName]: true,
                                [styleClassName.rpbItemClassNameActive]: pager.currentPage === page,
                            }) }, page)))),
                !onlyPageNumbers && (React__default["default"].createElement(React__default["default"].Fragment, null,
                    React__default["default"].createElement("li", null,
                        React__default["default"].createElement("button", { onClick: () => setPage(pager.currentPage + 1), "aria-label": "Next", className: classnames({
                                [styleClassName.rpbItemClassName]: true,
                                [styleClassName.rpbItemClassNameDisable]: pager.currentPage === pager.totalPages,
                            }) }, nextLabel)),
                    React__default["default"].createElement("li", null,
                        React__default["default"].createElement("button", { className: classnames({
                                [styleClassName.rpbItemClassName]: true,
                                [styleClassName.rpbItemClassNameDisable]: pager.currentPage === pager.totalPages,
                            }), "aria-label": 'End', onClick: () => setPage(pager.totalPages) }, endLabel)))),
                withGoToInput && (React__default["default"].createElement(React__default["default"].Fragment, null,
                    React__default["default"].createElement("li", null,
                        React__default["default"].createElement("div", { className: styleClassName.rpbGoItemClassName },
                            React__default["default"].createElement("input", { type: "number", onChange: (e) => setGoToInputValue(e.target.value) }))),
                    React__default["default"].createElement("li", null,
                        React__default["default"].createElement("button", { className: styleClassName.rpbItemClassName, onClick: onGoToPageSubmitHandle }, "Go"))))),
            withProgressBar && (React__default["default"].createElement("div", { role: "progressbar", "aria-valuenow": pager.currentPage !== 1
                    ? Math.round((pager.currentPage / pager.totalPages) * 100)
                    : 0, "aria-valuemin": 0, "aria-valuemax": 100, "aria-labelledby": "rpb-pagination", className: styleClassName.rpbProgressClassName, style: {
                    width: pager.currentPage !== 1
                        ? Math.round((pager.currentPage / pager.totalPages) * 100) +
                            '%'
                        : 0 + '%',
                } }))));
    }
    else {
        return null;
    }
};

exports.Pagination = Pagination;
//# sourceMappingURL=index.js.map
